name: Continuous Deployment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  pull-requests: write
  contents: write

jobs:
  release-stable:
    runs-on: ubuntu-latest
    name: Release Stable
    outputs:
      published: ${{ steps.changesets.outputs.published }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          title: 'chore(release): new version'
          commit: 'chore(release): new version'
          publish: yarn release
          version: yarn changeset-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get current package version
        id: get_version
        run: echo "CURRENT_PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create Github Release
        if: steps.changesets.outputs.published == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.CURRENT_PACKAGE_VERSION }}

  release-unstable:
    runs-on: ubuntu-latest
    name: Release Unstable
    needs: release-stable
    if: always() && github.event_name == 'push' && needs.release-stable.outputs.published == 'false'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Creating .npmrc
        run: |
          cat << EOF > ".npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create unstable release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # this ensures there's always a patch release created
          cat << 'EOF' > .changeset/snapshot-template-changeset.md
          ---
          '@ayanworks/credo-ethr-module': patch
          ---

          snapshot release
          EOF

          yarn changeset version --snapshot alpha
          yarn prettier --write .
          yarn build
          yarn changeset publish --tag alpha

          CURRENT_PACKAGE_VERSION=$(node -p "require('./package.json').version")
          git config --global user.name "Ayanworks"
          git config --global user.email "github@ayanworks.com"
          git tag v$CURRENT_PACKAGE_VERSION
          git push origin v$CURRENT_PACKAGE_VERSION --no-verify
