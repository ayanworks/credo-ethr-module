diff --git a/node_modules/@credo-ts/core/build/modules/dids/domain/verificationMethod/EcdsaSecp256k1VerificationKey2019.js b/node_modules/@credo-ts/core/build/modules/dids/domain/verificationMethod/EcdsaSecp256k1VerificationKey2019.js
index 7786dbc..f20a149 100644
--- a/node_modules/@credo-ts/core/build/modules/dids/domain/verificationMethod/EcdsaSecp256k1VerificationKey2019.js
+++ b/node_modules/@credo-ts/core/build/modules/dids/domain/verificationMethod/EcdsaSecp256k1VerificationKey2019.js
@@ -1,9 +1,13 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.getKeyFromEcdsaSecp256k1VerificationKey2019 = exports.isEcdsaSecp256k1VerificationKey2019 = exports.getEcdsaSecp256k1VerificationKey2019 = exports.VERIFICATION_METHOD_TYPE_ECDSA_SECP256K1_VERIFICATION_KEY_2019 = void 0;
+exports.VERIFICATION_METHOD_TYPE_ECDSA_SECP256K1_VERIFICATION_KEY_2019 = void 0;
+exports.getEcdsaSecp256k1VerificationKey2019 = getEcdsaSecp256k1VerificationKey2019;
+exports.isEcdsaSecp256k1VerificationKey2019 = isEcdsaSecp256k1VerificationKey2019;
+exports.getKeyFromEcdsaSecp256k1VerificationKey2019 = getKeyFromEcdsaSecp256k1VerificationKey2019;
 const crypto_1 = require("../../../../crypto");
 const Key_1 = require("../../../../crypto/Key");
 const error_1 = require("../../../../error");
+const utils_1 = require("../../../../utils");
 const VerificationMethod_1 = require("./VerificationMethod");
 exports.VERIFICATION_METHOD_TYPE_ECDSA_SECP256K1_VERIFICATION_KEY_2019 = 'EcdsaSecp256k1VerificationKey2019';
 /**
@@ -17,22 +21,22 @@ function getEcdsaSecp256k1VerificationKey2019({ key, id, controller, }) {
         publicKeyBase58: key.publicKeyBase58,
     });
 }
-exports.getEcdsaSecp256k1VerificationKey2019 = getEcdsaSecp256k1VerificationKey2019;
 /**
  * Check whether a verification method is a EcdsaSecp256k1VerificationKey2019 verification method.
  */
 function isEcdsaSecp256k1VerificationKey2019(verificationMethod) {
     return verificationMethod.type === exports.VERIFICATION_METHOD_TYPE_ECDSA_SECP256K1_VERIFICATION_KEY_2019;
 }
-exports.isEcdsaSecp256k1VerificationKey2019 = isEcdsaSecp256k1VerificationKey2019;
 /**
  * Get a key from a EcdsaSecp256k1VerificationKey2019 verification method.
  */
 function getKeyFromEcdsaSecp256k1VerificationKey2019(verificationMethod) {
-    if (!verificationMethod.publicKeyBase58) {
-        throw new error_1.CredoError('verification method is missing publicKeyBase58');
+    if (verificationMethod.publicKeyBase58) {
+        return Key_1.Key.fromPublicKeyBase58(verificationMethod.publicKeyBase58, crypto_1.KeyType.K256);
+    }
+    if (verificationMethod.publicKeyHex) {
+        return Key_1.Key.fromPublicKey(utils_1.TypedArrayEncoder.fromHex(verificationMethod.publicKeyHex), crypto_1.KeyType.K256);
     }
-    return Key_1.Key.fromPublicKeyBase58(verificationMethod.publicKeyBase58, crypto_1.KeyType.K256);
+    throw new error_1.CredoError('verificationMethod must have either publicKeyBase58 or publicKeyHex');
 }
-exports.getKeyFromEcdsaSecp256k1VerificationKey2019 = getKeyFromEcdsaSecp256k1VerificationKey2019;
 //# sourceMappingURL=EcdsaSecp256k1VerificationKey2019.js.map
\ No newline at end of file
